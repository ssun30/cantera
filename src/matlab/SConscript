import os
from os.path import join as pjoin
from buildutils import *

Import('env', 'build', 'install')

localenv = env.Clone()
linkflags = []

matlab_include = pjoin(localenv['matlab_path'], 'extern', 'include')

if localenv['OS'] == 'Windows':
    linklibs = list(env['cantera_shared_libs'])
    linklibs += ['libmx', 'libmex', 'libmat']
    if localenv['OS_BITS'] == 32:
        matlab_libs = pjoin(localenv['matlab_path'], 'extern',
                            'lib' ,'win32', 'microsoft')
        mexSuffix = '.mexw32'
    else:
        matlab_libs = pjoin(localenv['matlab_path'], 'extern',
                    'lib' ,'win64', 'microsoft')
        mexSuffix = '.mexw64'

    if localenv['CC'] == 'cl':
        linkflags.append('/export:mexFunction')
        machtype = 'X64' if localenv['OS_BITS'] == 64 else 'X86'
        linkflags.append('/MACHINE:' + machtype)
    elif localenv['CC'] == 'gcc':
        linkflags.append('-Wl,--export-all-symbols')

elif localenv['OS'] == 'Darwin':
    linklibs = list(env['cantera_libs'])
    linklibs += ['mx', 'mex', 'mat'] + env['LIBM']
    linkflags.extend(['-Wl,-exported_symbol,_mexFunction'])

    if localenv['OS_BITS'] == 64:
        matlab_libs = pjoin(localenv['matlab_path'], 'bin', 'maci64')
        mexSuffix = '.mexmaci64'
    else:
        matlab_libs = pjoin(localenv['matlab_path'], 'bin', 'macx86')
        mexSuffix = '.mexmaci'

elif os.name == 'posix':
    linklibs = list(env['cantera_libs'])
    linklibs += ['mx', 'mex', 'mat'] + env['LIBM']

    if localenv['OS_BITS'] == 64:
        matlab_libs = pjoin(localenv['matlab_path'], 'bin', 'glnxa64')
        mexSuffix = '.mexa64'
    else:
        matlab_libs = pjoin(localenv['matlab_path'], 'bin', 'glnx86')
        mexSuffix = '.mexglx'

    linkflags.extend(['-Wl,--no-undefined',
                      '-Wl,--version-script,src/matlab/mexFunction.map',
                      '-static-libstdc++'])

localenv.Prepend(CPPPATH=['#include', '#src', matlab_include])
localenv.Append(CPPDEFINES=['MATLAB_MEX_FILE'],
                LIBPATH=[matlab_libs],
                LINKFLAGS=linkflags)

linklibs += localenv['sundials_libs']
linklibs += localenv['blas_lapack_libs']

ctmethods = build(localenv.SharedLibrary('#interfaces/MatlabToolbox/matlab_legacy/toolbox/ctmethods',
                                         multi_glob(localenv, '.', 'cpp'),
                                         LIBPREFIX='',
                                         SHLIBPREFIX='',
                                         SHLIBSUFFIX=mexSuffix,
                                         LIBS=linklibs))

if localenv['OS'] in ('Windows'):
    localenv.Depends(ctmethods, localenv['cantera_shlib'])
else:
    localenv.Depends(ctmethods, localenv['cantera_staticlib'])

env['matlab_extension'] = ctmethods

### Install the Matlab toolbox ###

globalenv = env

def copy_var(target, source, env):
    if env['python_prefix'] == 'USER':
        env['python_module_loc_sc'] = ''
    else:
        env['python_module_loc_sc'] = globalenv['python_module_loc']

# 'ctpath_legacy.m' 
legacy_target = localenv.SubstFile('#interfaces/MatlabToolbox/ctpath_legacy.m',
                                   '#interfaces/MatlabToolbox/ctpath_legacy.m.in')
localenv.AddPreAction(legacy_target, copy_var)
localenv.Depends(legacy_target, env['install_python_action'])
install('$inst_matlab_dir', legacy_target)

# 'ctpath_new.m' 
new_target = localenv.SubstFile('#interfaces/MatlabToolbox/ctpath_new.m',
                                '#interfaces/MatlabToolbox/ctpath_new.m.in')
localenv.AddPreAction(new_target, copy_var)
localenv.Depends(new_target, env['install_python_action'])
install('$inst_matlab_dir', new_target)

# 'cantera_root.m'
ct_root = localenv/SubstFile('#interfaces/MatlabToolbox/cantera_root.m',
                              '#interfaces/MatlabToolbox/cantera_root.m.in')
install('$inst_matlab_dir/matlab_new/Utility', ct_root)

# 'Contents.m'
contents = localenv.SubstFile('#interfaces/MatlabToolbox/Contents.m',
                              '#interfaces/MatlabToolbox/Contents.m.in')
install('$inst_matlab_dir', contents)

# Legacy toolbox
install(localenv.RecursiveInstall, '$inst_matlab_dir/matlab_legacy',
        '#interfaces/MatlabToolbox/matlab_legacy/toolbox',
        exclude=['dll$', 'exp$', 'lib$', 'ilk$', 'manifest$'])
install(localenv.RecursiveInstall, '$inst_sampledir/matlab_legacy', '#samples/matlab_legacy')

# New Toolbox
install(localenv.RecursiveInstall, '$inst_matlab_dir/matlab_new',
        '#interfaces/MatlabToolbox/matlab_new/',
        exclude=['dll$', 'exp$', 'lib$', 'ilk$', 'manifest$'])
install(localenv.RecursiveInstall, '$inst_sampledir/matlab_new', '#samples/matlab_new')

if os.name == 'nt':
    shlib = [f for f in localenv['cantera_shlib']
             if f.name.endswith('dll')]
    install('$inst_matlab_dir/matlab_legacy', shlib)
